<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>golang - 标签 - </title>
    <link>https://www.qilitang.top/tags/golang/</link>
    <description>golang - 标签 - </description>
    <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>zhangspring@live.com (Qilitang)</managingEditor>
      <webMaster>zhangspring@live.com (Qilitang)</webMaster><lastBuildDate>Thu, 09 Jan 2020 17:06:11 &#43;0800</lastBuildDate><atom:link href="https://www.qilitang.top/tags/golang/" rel="self" type="application/rss+xml" /><item>
  <title>Go 接口 协程 信道 异常处理</title>
  <link>https://www.qilitang.top/posts/go-09-%E6%8E%A5%E5%8F%A3/</link>
  <pubDate>Thu, 09 Jan 2020 17:06:11 &#43;0800</pubDate>
  <author>Qilitang</author>
  <guid>https://www.qilitang.top/posts/go-09-%E6%8E%A5%E5%8F%A3/</guid>
  <description><![CDATA[1 接口 接口定义一个对象的行为。接口只指定了对象应该做什么，至于如何实现这个行为（即实现细节），则由对象本身去确定。 （python中 abc 模块 可以强制要求子类必须重写父类的方法 否则报错） python和go都属于鸭子类型，非侵入式接口 java：侵入式接口 1、定义接口 （接口是一系列行为的集合：一系列方法的集合]]></description>
</item>
<item>
  <title>Go 指针/结构体/方法</title>
  <link>https://www.qilitang.top/posts/go-08-%E6%8C%87%E9%92%88-%E7%BB%93%E6%9E%84%E4%BD%93/</link>
  <pubDate>Wed, 08 Jan 2020 17:06:11 &#43;0800</pubDate>
  <author>Qilitang</author>
  <guid>https://www.qilitang.top/posts/go-08-%E6%8C%87%E9%92%88-%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
  <description><![CDATA[指针 1、定义指针 1 2 // 指向int类型的指针（指向什么类型指针，就是在什么类型前加星号） var a *int 2、指针的零值 1 fmt.Println(a) //nil 3、使用指针 1 2 3 4 5 var a *int var b int=100 // a指针指向b （取谁的地址，就是在谁前面加一个&amp;） a=&amp;b fmt.Println(a) // 0xc0000b4008 4、了解（骚操作） 1 2 3 4 5 var a *int var b **int= &amp;a var c ***int= &amp;b var d ****int =&amp;c fmt.Println(d) 5、 解引用 （把指针反解成值）]]></description>
</item>
<item>
  <title>Go 数组/切片/map</title>
  <link>https://www.qilitang.top/posts/go-07-%E6%95%B0%E7%BB%84%E5%88%87%E7%89%87/</link>
  <pubDate>Tue, 07 Jan 2020 17:06:11 &#43;0800</pubDate>
  <author>Qilitang</author>
  <guid>https://www.qilitang.top/posts/go-07-%E6%95%B0%E7%BB%84%E5%88%87%E7%89%87/</guid>
  <description><![CDATA[数组 1、定义 1 2 3 4 5 6 //1 基本使用：定义 //定义了一个大小为3的int类型数组 //数组在定义阶段，大小和类型就固定了 var a [3]int //只定义，没有初始化 fmt.Println(a) // 因int 类型的0值是0 所以， 未初始化数组是[0,0,0] 2、使用数组 1 2 3 4 var a [3]int a[2]=100 fmt.Println(a) // [0,0,100] fmt.Println(a[0]) // 100 3、定义并赋值 1 2 3 4 5 6 7 8 9 10 11 12 // 方式1 var a [3]int=[3]int{1,2,3} // 方]]></description>
</item>
<item>
  <title>Go if-else/ for 循环/ switch</title>
  <link>https://www.qilitang.top/posts/go-05-if-else%E8%AF%AD%E5%8F%A5/</link>
  <pubDate>Mon, 06 Jan 2020 17:06:11 &#43;0800</pubDate>
  <author>Qilitang</author>
  <guid>https://www.qilitang.top/posts/go-05-if-else%E8%AF%AD%E5%8F%A5/</guid>
  <description><![CDATA[if else 基本使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import &#34;fmt&#34; // if else if else func main() { a := 10 if a == 10 { fmt.Println(&#34;13&#34;) } else if a &gt; 10 { fmt.Println(&#34;a大于10&#34;) } else { fmt.Println(&#34;a小于10&#34;) } } 不能换行（go语言每一行结尾，需要加一个; ,每当换行，会自动加;） 在条件里可以进行]]></description>
</item>
<item>
  <title>Go 包</title>
  <link>https://www.qilitang.top/posts/go-06-%E5%8C%85/</link>
  <pubDate>Mon, 06 Jan 2020 17:06:11 &#43;0800</pubDate>
  <author>Qilitang</author>
  <guid>https://www.qilitang.top/posts/go-06-%E5%8C%85/</guid>
  <description><![CDATA[包 1 2 3 4 5 6 7 8 9 10 11 12 13 14 //1 在同一个包下（文件夹下），包名必须一致 //2 以后，包名就是文件夹的名字 //3 同一个包下，同名函数只能有一个（init除外） //4 一个包（当成一个文件），同一包下的函数，直接调用即可 //5 导包的位置，从src路径开始 //6 包只要在src路径下就可以导入 //7 大写表示导出，在外部包可以使用，小写]]></description>
</item>
<item>
  <title>Go 变量</title>
  <link>https://www.qilitang.top/posts/go-02-%E5%8F%98%E9%87%8F/</link>
  <pubDate>Sat, 04 Jan 2020 17:06:11 &#43;0800</pubDate>
  <author>Qilitang</author>
  <guid>https://www.qilitang.top/posts/go-02-%E5%8F%98%E9%87%8F/</guid>
  <description><![CDATA[变量的定义方式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 package main import &#34;fmt&#34; func main() { // 方式一 // var 变量名 变量类型=变量值 // 注意 变量定义后 必须使用, 不适使用报错 // 导入的包必须使用 不适用报错 var age int =18 // 定义并赋值 var name string // 定义 name = &#34;我是你爸爸&#34; //赋值 fmt.Println(name, age) // 方式二 类型推导(不需要加类型]]></description>
</item>
<item>
  <title>Go语言介绍及环境搭建</title>
  <link>https://www.qilitang.top/posts/go-01%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
  <pubDate>Sat, 04 Jan 2020 17:06:11 &#43;0800</pubDate>
  <author>Qilitang</author>
  <guid>https://www.qilitang.top/posts/go-01%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
  <description><![CDATA[go语言介绍 1 2 3 4 5 6 # 诞生于09年, 是谷歌公司推出的. -python 1989年 -java 1990年 # 缺点: 生态不是特别好 Go 语言特性 1 2 3 4 # 跨平台编译型语言 # 语法接近C # 有垃圾回收机制(gc) # 支持面向对象和面向过程式的编程模式.(没有class 但是支持) Go 语言发展 1 # 目前最新的是1.14.2 版本. go语言向下兼容]]></description>
</item>
<item>
  <title>基本数据类型</title>
  <link>https://www.qilitang.top/posts/go-03-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
  <pubDate>Sat, 04 Jan 2020 17:06:11 &#43;0800</pubDate>
  <author>Qilitang</author>
  <guid>https://www.qilitang.top/posts/go-03-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
  <description><![CDATA[基本数据类型 整型 整型分为以下两个大类： 按长度分为：int8、int16、int32、int64 对应的无符号整型：uint8、uint16、uint32、uint64 其中，uint8就是我们熟知的byte型，int16对应C语言中的short型，int64对应C语言中的long型。 1 2 3 4 5 6 7 8 9 10]]></description>
</item>
</channel>
</rss>
